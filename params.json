{"name":"Lincwee Test WebPage","tagline":"lincwee's blog","body":"# lincwee.github.io\r\n##lincwee's blog\r\n\r\n##iOS内存管理(二) 实现篇\r\n首先需要强调的是，现在iOS中的NSObject类的Foundation框架并没有公开。不过Foundation框架使用的Core Foundation框架的源代码，以及通过NSObject类进行的内存管理这一块儿的源代码是公开的。本次使用的是GNUstep来设计具体说明，从NSObejct的源代码到内存管理的源代码。\r\n\r\n|对象操作    |Objective-C方法     |\r\n|:------------|:-------|\r\n|生成并持有对象|alloc/new/copy/mutableCopy|\r\n|持有对象|retain|\r\n|释放对象|release|\r\n|废弃对象|delloc|\r\n\r\n>基本用法\r\n\r\n    //取得非自己生成并持有的对象\r\n    id obj1 = [NSMutableArray array];\r\n    //取得并生成自己持有的对象\r\n    id obj2 = [[NSObject alloc] init];\r\n    \r\n    //取得对象存在，并且自己能够持有\r\n    [obj1 retain]; \r\n    \r\n    //释放对象1\r\n    [obj1 release];\r\n    \r\n    //释放对象2\r\n    [obj2 release];\r\n    \r\n    //[obj delloc];\r\n    \r\n    //嘿嘿，如果我再加一个release会怎么样\r\n    [obj1 release]\r\n\r\n\r\n###alloc\r\n>alloc实现代码\r\n\r\n    +(id) alloc\r\n    {\r\n        return [self allocWithZone:NSDefaultMallocZone()];\r\n    }\r\n    +(id)allocWithZone:(NSZone *)z\r\n    {\r\n        return NSAllocateObject(self, 0, z);\r\n    }\r\n>通过allocWithZone：**类**方法调用NSAllocateObject函数分配了对象。\r\n\r\n    struct obj_layout{\r\n        NSUInterger retained;\r\n    }\r\n    inline id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone){\r\n        int size = 计算容纳对象所需内存大小的空间\r\n        //分配内存对象所需空间\r\n        id new = NSZoneMalloc(zone, size);\r\n        //将内存控件置0\r\n        memset(new, 0, size);\r\n        //得到并返回对象使用的指针，为什么是[1],因为，是要返回除了retained以外的部分，本身的计数器并不需要得到，所以就要是alloc指针向下移动一位。\r\n        new = (id)&((struct obj_layout *) new)[1];\r\n    }\r\n    \r\n###retainCount\r\n>ratainCount代码实现\r\n\r\n    //获得当前对象的引用计数，可以使用会实例方法获得\r\n    id obj = [[NSObject alloc] init];\r\n    //此时应该输出的是1\r\n    NSLog(@\"%d\",[obj retainCount]);\r\n\r\n    -(NSUinteger) retainCount\r\n    {\r\n    //self用法\r\n        return NSExtraRefCount(self) + 1;\r\n    }\r\n    inline NSUInteger NSExtraRefCount(id anObject)\r\n    {\r\n    //这个[-1]的意思代表把alloc指针向上移动一位去的retained的内容\r\n        return ((struct obj_layout *) anobject)[-1].retained;\r\n    }\r\n    \r\n###retain\r\n>retain和release基本相同\r\n\r\n    -(id) retain\r\n    {\r\n        NSIncrementExtraRefCount(self);\r\n        return self;\r\n    }\r\n    inline void NSIncrementExtraRefCount(id anObject)\r\n    {\r\n        if(((struct obj_layout *)anObject)[-1].retained == UINT_MAX - 1)\r\n        [NSException raise:NSInternalInconsistencyException format:@\"NSIncrementExtraRefCount() asked to increment too far\"];\r\n        \r\n        ((struct obj_layout *)anObject)[-1].retained++;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}